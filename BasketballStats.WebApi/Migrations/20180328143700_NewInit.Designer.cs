// <auto-generated />
using BasketballStats.WebApi.Authorization.Enums;
using BasketballStats.WebApi.Data.Enum;
using BasketballStats.WebApi.ModelData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace BasketballStats.WebApi.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20180328143700_NewInit")]
    partial class NewInit
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.Claim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("claim_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<int>("CustomClaim")
                        .HasColumnName("custom_claim");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("claims");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.ClientApplication", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("client_application_id");

                    b.Property<string>("ClientApplicationCode")
                        .IsRequired()
                        .HasColumnName("client_application_code")
                        .HasMaxLength(6);

                    b.Property<string>("ClientApplicationName")
                        .IsRequired()
                        .HasColumnName("client_application_name")
                        .HasMaxLength(20);

                    b.Property<string>("ClientApplicationPassword")
                        .IsRequired()
                        .HasColumnName("client_application_password")
                        .HasMaxLength(50);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("client_applications");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.ClientApplicationUtil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("client_application_util_id");

                    b.Property<int>("ClientApplicationId")
                        .HasColumnName("client_application_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<string>("SpecialValue")
                        .IsRequired()
                        .HasColumnName("special_value")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("ClientApplicationId")
                        .IsUnique();

                    b.ToTable("client_application_utils");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("role_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnName("role_name")
                        .HasMaxLength(25);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("roles");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("role_claim_id");

                    b.Property<int>("ClaimId")
                        .HasColumnName("claim_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("RoleId");

                    b.ToTable("role_claims");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.RoleEntityClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("role_entity_claim_id");

                    b.Property<bool>("CanCreate")
                        .HasColumnName("can_create");

                    b.Property<bool>("CanDelete")
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanSelect")
                        .HasColumnName("can_select");

                    b.Property<bool>("CanUpdate")
                        .HasColumnName("can_update");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("Entity")
                        .HasColumnName("entity");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("role_entity_claims");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id");

                    b.Property<int>("AccessFailedCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("access_failed_count")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("email")
                        .HasMaxLength(100);

                    b.Property<string>("EmailConfirmCode")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("email_confirm_code")
                        .HasDefaultValue("786129")
                        .HasMaxLength(6);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnName("email_confirmed");

                    b.Property<bool>("Lockout")
                        .HasColumnName("lockout");

                    b.Property<DateTime?>("LockoutEndDateTime")
                        .HasColumnName("lockout_end_date_time")
                        .HasMaxLength(256);

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnName("password")
                        .HasMaxLength(256);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnName("user_name")
                        .HasMaxLength(25);

                    b.HasKey("Id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_claim_id");

                    b.Property<int>("ClaimId")
                        .HasColumnName("claim_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("ClaimId");

                    b.HasIndex("UserId");

                    b.ToTable("user_claims");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.UserEntityClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_entity_claim_id");

                    b.Property<bool>("CanCreate")
                        .HasColumnName("can_create");

                    b.Property<bool>("CanDelete")
                        .HasColumnName("can_delete");

                    b.Property<bool>("CanSelect")
                        .HasColumnName("can_select");

                    b.Property<bool>("CanUpdate")
                        .HasColumnName("can_update");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("Entity")
                        .HasColumnName("entity");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_entity_claims");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_role_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("RoleId")
                        .HasColumnName("role_id");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("user_roles");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.UserUtil", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_util_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<string>("SpecialValue")
                        .IsRequired()
                        .HasColumnName("special_value")
                        .HasMaxLength(100);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<int>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("user_utils");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Models.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("match_id");

                    b.Property<int>("AwayTeamId")
                        .HasColumnName("away_team_id");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("DurationInMinutes")
                        .HasColumnName("duration_in_minutes");

                    b.Property<int>("HomeTeamId")
                        .HasColumnName("home_team_id");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnName("match_date");

                    b.Property<int>("Order")
                        .HasColumnName("order");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.Property<string>("VideoLink")
                        .HasColumnName("video_link")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("AwayTeamId");

                    b.HasIndex("HomeTeamId");

                    b.HasIndex("MatchDate", "Order")
                        .IsUnique();

                    b.ToTable("matches");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Models.Player", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("player_id");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnName("birth_date");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(25);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnName("surname")
                        .HasMaxLength(25);

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.ToTable("players");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Models.Stat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("stat_id");

                    b.Property<int>("Assist")
                        .HasColumnName("assist");

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<int>("Interrupt")
                        .HasColumnName("interrupt");

                    b.Property<int>("LooseBall")
                        .HasColumnName("loose_ball");

                    b.Property<int>("MatchId")
                        .HasColumnName("match_id");

                    b.Property<int>("MissingOnePoint")
                        .HasColumnName("missing_one_point");

                    b.Property<int>("MissingTwoPoint")
                        .HasColumnName("missing_two_point");

                    b.Property<int>("OnePoint")
                        .HasColumnName("one_point");

                    b.Property<int>("PlayerId")
                        .HasColumnName("player_id");

                    b.Property<int>("Rebound")
                        .HasColumnName("rebound");

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<int>("StealBall")
                        .HasColumnName("steal_ball");

                    b.Property<int>("TeamId")
                        .HasColumnName("team_id");

                    b.Property<int>("TwoPoint")
                        .HasColumnName("two_point");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.HasIndex("MatchId", "PlayerId", "TeamId")
                        .IsUnique();

                    b.ToTable("stats");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("team_id");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnName("color")
                        .HasMaxLength(25);

                    b.Property<DateTime>("CreateDateTime")
                        .HasColumnName("create_date_time");

                    b.Property<DateTime?>("DeleteDateTime")
                        .HasColumnName("delete_date_time");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("name")
                        .HasMaxLength(25);

                    b.Property<int>("Status")
                        .HasColumnName("status");

                    b.Property<DateTime?>("UpdateDateTime")
                        .HasColumnName("update_date_time");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("teams");
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.ClientApplicationUtil", b =>
                {
                    b.HasOne("BasketballStats.WebApi.Authorization.Models.ClientApplication", "ClientApplication")
                        .WithOne("ClientApplicationUtil")
                        .HasForeignKey("BasketballStats.WebApi.Authorization.Models.ClientApplicationUtil", "ClientApplicationId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.RoleClaim", b =>
                {
                    b.HasOne("BasketballStats.WebApi.Authorization.Models.Claim", "Claim")
                        .WithMany("RoleClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BasketballStats.WebApi.Authorization.Models.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.RoleEntityClaim", b =>
                {
                    b.HasOne("BasketballStats.WebApi.Authorization.Models.Role", "Role")
                        .WithMany("RoleEntityClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.UserClaim", b =>
                {
                    b.HasOne("BasketballStats.WebApi.Authorization.Models.Claim", "Claim")
                        .WithMany("UserClaims")
                        .HasForeignKey("ClaimId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BasketballStats.WebApi.Authorization.Models.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.UserEntityClaim", b =>
                {
                    b.HasOne("BasketballStats.WebApi.Authorization.Models.User", "User")
                        .WithMany("UserEntityClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.UserRole", b =>
                {
                    b.HasOne("BasketballStats.WebApi.Authorization.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BasketballStats.WebApi.Authorization.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BasketballStats.WebApi.Authorization.Models.UserUtil", b =>
                {
                    b.HasOne("BasketballStats.WebApi.Authorization.Models.User", "User")
                        .WithOne("UserUtil")
                        .HasForeignKey("BasketballStats.WebApi.Authorization.Models.UserUtil", "UserId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BasketballStats.WebApi.Models.Match", b =>
                {
                    b.HasOne("BasketballStats.WebApi.Models.Team", "AwayTeam")
                        .WithMany("AwayMatches")
                        .HasForeignKey("AwayTeamId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BasketballStats.WebApi.Models.Team", "HomeTeam")
                        .WithMany("HomeMatches")
                        .HasForeignKey("HomeTeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("BasketballStats.WebApi.Models.Stat", b =>
                {
                    b.HasOne("BasketballStats.WebApi.Models.Match", "Match")
                        .WithMany("Stats")
                        .HasForeignKey("MatchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BasketballStats.WebApi.Models.Player", "Player")
                        .WithMany("Stats")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("BasketballStats.WebApi.Models.Team", "Team")
                        .WithMany("Stats")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
